Geral

https://git-scm.com/docs

As configurações do GIT são armazenadas no arquivo .gitconfig localizado dentro 
do diretório do usuário do Sistema Operacional (Ex.: Windows: C:\Users\Documents and Settings\
Lista de Comandos Uteis do GIT

Normalmente armazenado no diretório do usuário do Sistema Operacional. O arquivo que possui 
a lista dos arquivos/diretórios a serem ignorados por todos os repositórios deverá ser declarado 
dentro da pasta .gitignore, nesse caso NÃO SERÃO adicionados em um repositório. 
Deve ser armazenado no diretório do repositório e deve conter a lista dos arquivos/diretórios
que devem ser ignorados apenas para o repositório específico.

Para alternar entre um BRANCH e outro é necessário fazer o COMMIT das alterações atuais 
para depois trocar para um outro BRANCH. Se existir a necessidade de realizar a troca 
sem fazer o COMMIT é possível criar um STASH. O STASH como se fosse um BRANCH temporário 
que contem apenas as alterações ainda não commitadas.

Para realizar o MERGE, é necessário estar no BRANCH que deverá receber as alterações. 
O MERGE pode automático ou manual. O MERGE automático será feito em arquivos textos que 
não sofreram alterações nas mesmas linhas, já o MERGE manual será feito em arquivos textos 
que sofreram alterações nas mesmas linhas.

O primeiro PUSH de um repositório deve conter o nome do repositório remoto e o BRANCH.
Os demais PUSH não precisam dessa informação



Estados
Modificado 	(modified);
Preparado 	(staged)
Consolidado 	(comitted);

Setar usuário
git config --global user.name "Leonardo Comelli"

Setar email
git config --global user.email leonardo@software-ltda.com.br

Setar editor
git config --global core.editor vim

Setar ferramenta de merge
git config --global merge.tool vimdiff

Setar arquivos a serem ignorados
git config --global core.excludesfile ~/.gitignore

Listar configurações
git config --list

Clonar repositório remoto
git clone git@github.com:digite_o_nome_do_usuario_git_aqui/digite_o_nome_do_diretorio_remoto.git

Criar repositório Local
git init

Verificar estado dos arquivos/diretórios
git status

Add um arquivo em específico
git add meu_arquivo.txt

Add um diretório em específico
git add meu_diretorio

Add todos os arquivos/diretórios
git add .	

Add um arquivo que esta listado no .gitignore (geral ou do repositório)
git add -f arquivo_no_gitignore.txt

Visualizar  o estado atual do repositório e o Diretorio de Trabalho
git status

Criando um novo branch
git branch nome_branch

O MASTER é o branch principal do GIT.
O HEAD é um ponteiro especial que indica qual é o branch atual. 
Por padrão, o HEAD aponta para o branch principal, o master.

Trocando para um branch existente
git checkout nome_branch
Neste caso, o ponteiro principal HEAD esta apontando para o branch chamada nome_branch

Criar um novo branch e trocar
git checkout -b nome_branch

Apagando um branch
git branch -d bug-123

Listar branches
git branch -a

Listar branches com informações dos últimos commits
git branch -v

Listar branches que já foram fundidos (merged) com o master
git branch --merged

Listar branches que não foram fundidos (merged) com o master
git branch --no-merged

Criando branch no repositório remoto

Criando um branch remoto com o mesmo nome
git push origin bug-123

Criando um branch remoto com nome diferente
git push origin bug-123:new-branch

Baixar um branch remoto para edição
git checkout -b bug-123 origin/bug-123

Apagar branch remoto
git push origin:bug-123

Voltar para o branch principal (master)
git checkout master

Merge entre os branches 
git merge nome_branch

Commit arquivo/diretório
git commit meu_arquivo.txt

Commit vários arquivos
git commit meu_arquivo.txt meu_outro_arquivo.txt

Commit informando mensagem
git commit meuarquivo.txt -m "minha mensagem de commit"

Exibir histórico
git log

Exibir histórico com diff das duas últimas alterações
git log -p -2

Exibir resumo do histórico (hash completa, autor, data, comentário e qtde de alterações (+/-))
git log --stat

Exibir informações resumidas em uma linha (hash completa e comentário)
git log --pretty=oneline

git log --graph

Verifique as demais opções de formatação no Git Book

git PULL é usado para buscar e baixar conteúdo de repositórios remotos 
git pull

git PUSH envia conteúdo do repositório local para um repositório remoto. 
git push -u origin master


Exibir os repositórios remotos
git remote
git remote -v

Vincular repositório local com um repositório remoto
git remote add origin git@github.com:leocomelli/curso-git.git

Exibir informações dos repositórios remotos
git remote show origin

Renomear um repositório remoto
git remote rename origin curso-git

Desvincular um repositório remoto
git remote rm meu_repositorio

Remover arquivo
git rm meu_arquivo.txt

Remover diretório
git rm -r meu_diretorio

Desfazendo alteração local (modified)
git checkout -- meu_arquivo.txt
Este comando deve ser utilizando enquanto o arquivo NÃO foi adicionado na staged area.

Desfazendo alteração local (staged)
git reset HEAD meu_arquivo.txt
Este comando deve ser utilizando quando o arquivo JÁ FOI adicionado na staged area.

Alterando mensagens de commit
git commit --amend -m "Minha nova mensagem"

Alterando os três últimos commits
git rebase -i HEAD~3
O editor de texto será aberto com as linhas representando os três últimos commits.

pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added catfile
Altere para edit os commits que deseja realizar alterações.

edit f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added catfile

Feche o editor de texto.

Digite o comando para alterar a mensagem do commit que foi marcado como edit.
git commit --amend -m "Minha nova mensagem"

Aplique a alteração

git rebase --continue
Atenção: É possível alterar a ordem dos commits ou remover um commit apenas mudando as linhas 
ou removendo.

git rebase master
Fazendo o rebase entre o nome_branch e o master.

Remover todo histórico de um arquivo
git filter-branch --tree-filter 'rm -f passwords.txt' HEAD

Tags
Criando uma tag leve
git tag vs-1.1

Criando uma tag anotada
git tag -a vs-1.1 -m "Minha versão 1.1"

Criando uma tag assinada
Para criar uma tag assinada é necessário uma chave privada (GNU Privacy Guard - GPG).
git tag -s vs-1.1 -m "Minha tag assinada 1.1"

Criando tag a partir de um commit (hash)
git tag -a vs-1.2 9fceb02

Criando tags no repositório remoto
git push origin vs-1.2

Criando todas as tags locais no repositório remoto
git push origin --tags

Criar um stash
git stash

Listar stashes
git stash list

Voltar para o último stash
git stash apply

Voltar para um stash específico
git stash apply stash@{2}
Onde 2 é o indíce do stash desejado.

Criar um branch a partir de um stash
git stash branch meu_branch


git fetch
git squash

